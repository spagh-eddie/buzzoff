[build-system]
requires = [
    "setuptools>=46.4",  # for "attr:" directive
    "setuptools_scm[toml]>=6.2",
    "wheel",
]
build-backend = "setuptools.build_meta"

[project]
name = "buzz"
authors = [
  {name = "Eddie Darling", email = "darling@berkeley.edu"},
]
maintainers = [
  {name = "Eddie Darling", email = "darling@berkeley.edu"},
]
description = "Word games"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.10"  # for match-case
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Operating System :: OS Independent",
]
dependencies = [
    "click",
]
dynamic = ["version"]

[project.urls]
Repository = "https://github.com/spagh-eddie/buzzoff"

[project.optional-dependencies]
dev = [
    "black",
    "isort",
    "mypy",
    "pylint",
    "pytest",
]

[tool.setuptools_scm]
write_to = "src/buzz/_version.py"

[tool.black]
target-version = ["py310"]

[tool.isort]
profile = "black"
force_alphabetical_sort_within_sections = true

[tool.mypy]
python_version = "3.10"
show_column_numbers = true
show_error_codes = true
# don't report errors on files unless we explicitly pass them
follow_imports = "silent"
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
warn_unreachable = true

[tool.pylint.master]
# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code. (This is an alternative name to extension-pkg-allow-list
# for backward compatibility.)
extension-pkg-whitelist = [
    "numpy",
]
# if under this score threshold, exit non-zero...
fail-under = 10.0
# ... or if have any error categories, exit non-zero
fail-on = "E"
# Files or directories to be skipped. They should be base names, not paths.
ignore = "CVS"
# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use.
jobs = 1
# Control the amount of potential inferred values when inferring a single
# object. This can help the performance when dealing with large functions or
# complex, nested conditions.
limit-inference-results = 100
# Pickle collected data for later comparisons.
persistent = "yes"
# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode = "yes"
# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension = "no"
ignore-paths = ["src/buzz/_version.py"]
load-plugins = [
    "pylint.extensions.broad_try_clause",
    "pylint.extensions.check_elif",
    "pylint.extensions.code_style",
    "pylint.extensions.consider_ternary_expression",
    "pylint.extensions.docparams",
    "pylint.extensions.docstyle",
    "pylint.extensions.empty_comment",
    "pylint.extensions.for_any_all",
    "pylint.extensions.mccabe",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.typing",
]

[tool.pylint.messages_control]
disable = [
    "invalid-name",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "logging-not-lazy",
    "logging-format-interpolation",
    "logging-fstring-interpolation",
    "too-few-public-methods",
    "too-many-lines",
    "docstring-first-line-empty",
    "missing-raises-doc",
    # formatting-related warnings are ignored; formatting is handled by `black`
    "line-too-long",
]
enable = [
    "c-extension-no-member",
    "useless-suppression",
]

[tool.pylint.refactoring]
# Maximum number of nested blocks for function / method body
max-nested-blocks = 5
# Complete name of functions that never returns. When checking for
# inconsistent-return-statements if a never returning function is called then
# it will be considered as an explicit return statement and no message will be
# printed.
never-returning-functions = ["sys.exit"]

[tool.pylint.logging]
# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style = "new"
# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules = ["logging"]

[tool.pylint.spelling]
# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions = 4
# Tells whether to store unknown words to the private dictionary (see the
# --spelling-private-dict-file option) instead of raising a message.
spelling-store-unknown-words = "no"

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.typecheck]
# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators = ["contextlib.contextmanager"]
# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members = [
    "plt.cm.*",
    "requests.codes.*",
    "requests.status_codes.codes.*",
]
# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members = "yes"
# Tells whether to warn about missing members when the owner of the attribute
# is inferred to be None.
ignore-none = "yes"
# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference
# can return multiple potential results while evaluating a Python object, but
# some branches might not be evaluated, which results in partial inference. In
# that case, it might be useful to still emit no-member and other checks for
# the rest of the inferred objects.
ignore-on-opaque-inference = "yes"
# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes = [
    "optparse.Values",
    "thread._local",
    "_thread._local",
]
# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis). It
# supports qualified module names, as well as Unix pattern matching.
ignored-modules = []
# Show a hint with possible names when a member name was not found. The aspect
# of finding the hint is based on edit distance.
missing-member-hint = "yes"
# The minimum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance = 1
# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices = 1
# List of decorators that change the signature of a decorated function.
signature-mutators = [
    "click.decorators.argument",
    "click.decorators.option",
]

[tool.pylint.variables]
# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables = "yes"
# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks = ["cb_", "_cb"]
# A regular expression matching the name of dummy variables (i.e. expected to
# not be used).
dummy-variables-rgx = '_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_'
# Argument names that match this expression will be ignored. Default to name
# with leading underscore.
ignored-argument-names = '_.*|^ignored_|^unused_'
# Tells whether we should check for unused import in __init__ files.
init-import = "no"
# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules = [
    "six.moves",
    "past.builtins",
    "future.builtins",
    "builtins",
    "io",
]

[tool.pylint.format]
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format = "LF"
# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines = '^\s*(# )?<?https?://\S+>?$'
# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren = 4
# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string = "    "
# Maximum number of characters on a single line.
max-line-length = 100
# Maximum number of lines in a module.
max-module-lines = 1000
# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
single-line-class-stmt = "no"
# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt = "no"

[tool.pylint.similarities]
# Ignore comments when computing similarities.
ignore-comments = "yes"
# Ignore docstrings when computing similarities.
ignore-docstrings = "yes"
# Ignore imports when computing similarities.
ignore-imports = "no"
# Minimum lines number of a similarity.
min-similarity-lines = 4

[tool.pylint.basic]
# Naming style matching correct argument names.
argument-naming-style = "snake_case"
# Naming style matching correct attribute names.
attr-naming-style = "snake_case"
# Naming style matching correct class attribute names.
class-attribute-naming-style = "any"
# Naming style matching correct class constant names.
class-const-naming-style = "UPPER_CASE"
# Naming style matching correct class names.
class-naming-style = "PascalCase"
# Naming style matching correct constant names.
const-naming-style = "UPPER_CASE"
# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length = -1
# Naming style matching correct function names.
function-naming-style = "camelCase"
# Include a hint for the correct naming format with invalid-name.
include-naming-hint = "no"
# Naming style matching correct inline iteration names.
inlinevar-naming-style = "any"
# Naming style matching correct method names.
method-naming-style = "snake_case"
# Naming style matching correct module names.
module-naming-style = "snake_case"
# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx = '^_'
# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
# These decorators are taken in consideration only for invalid-name.
property-classes = ["abc.abstractproperty"]
# Naming style matching correct variable names.
variable-naming-style = "snake_case"

[tool.pylint.string]
# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
check-quote-consistency = "no"
# This flag controls whether the implicit-str-concat should generate a warning
# on implicit string concatenation in sequences defined over several lines.
check-str-concat-over-line-jumps = "no"

[tool.pylint.imports]
# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all = "no"
# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks = "no"
# Deprecated modules which should not be used, separated by a comma.
deprecated-modules = ["optparse", "tkinter.tix"]

[tool.pylint.classes]
# Warn about protected attribute access inside special methods
check-protected-access-in-special-methods = "no"
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods = [
    "__init__",
    "__new__",
    "setUp",
    "__post_init__",
    "__set_name__",
]
# List of member names, which should be excluded from the protected access
# warning.
exclude-protected = [
    "_asdict",
    "_fields",
    "_replace",
    "_source",
    "_make",
]
# List of valid names for the first argument in a class method.
valid-classmethod-first-arg = ["cls"]
# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg = ["cls"]

[tool.pylint.design]
# maximum number of arguments for function / method.
max-args = 5
# maximum number of attributes for a class (see R0902).
max-attributes = 7
# maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr = 5
# maximum number of branch for function / method body.
max-branches = 12
# maximum number of locals for function / method body.
max-locals = 15
# maximum number of parents for a class (see R0901).
max-parents = 7
# maximum number of public methods for a class (see R0904).
max-public-methods = 20
# maximum number of return / yield for function / method body.
max-returns = 6
# maximum number of statements in function / method body.
max-statements = 50
# minimum number of public methods for a class (see R0903).
min-public-methods = 2

[tool.pylint.exceptions]
# exceptions that will emit a warning when being caught. Defaults to
# "BaseException, Exception".
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.broad_try_clause]
max-try-statements = 3

[tool.pytest.ini_options]
# xpass counts as a failure
xfail_strict = true
addopts = [
    # all-except-passes in summary
    "-ra",
    # fail on unrecognized markers
    "--strict-markers",
    # run doctests in python modules
    "--doctest-modules",
    # run doctests in RST files (for docs/ dir)
    "--doctest-glob=*.rst",
]
# run these files/dirs if none is specified
testpaths = [
    "src/",
    "tests/",
]
